const Discord = require("discord.js"); // Exporta a depend√™ncia da discord.js
const firebase = require("firebase"); // Exporta a depend√™ncia do firebase
const fs = require("fs"); // Exporta a depend√™ncia do fs(File System)
const generatePassword = require("generate-password"); // Exporta a depend√™ncia do generate-password
const fetch = require("node-fetch"); // Exporta a depend√™ncia do node-fetch
const client_neko = require("nekos.life"); // Exporta a depend√™ncia da Nekos Life
const database = firebase.database(); // Exporta a fun√ß√£o de database do firebase
const neko = new client_neko(); // Cria um cliente para guscar na api da nekos

module.exports = {
    name: "eval", // Nome principal do comando
    description: "Comando para executar c√≥digos em JavaScript na Mizuhara.", // Descri√ß√£o do comando
    category: "dev", // Categorias: fun, mod, utils, config, social, dev, register, botlist, nsfw, mc, image
    guildOnly: true, // S√≥ pode ser usado em servidor
    ClientPerm: ["EMBED_LINKS"], // Permiss√µes da Mizuhara para executar o comando
    usage: "[C√≥digo]", // Modo de uso para usar o comando
    cooldown: 3, // Tempo de cooldown do comando
    developer: true, // Apenas para desenvolvedores usarem esse comando
    async execute(client, message, args, emojis, colors, config, prefix){
        if (!args[0]) {
            return message.channel.send(`${emojis.IconChannelBlock} **|** ${message.author}, insira um valor para executar o eval.`); // Notifica-r√° ao desenvolvedor sobre a falta dos argumentos
        }; // Caso o desenvolvedor n√£o tenha escrito nada no eval, ele retorna-r√° a mensagem
        
        await message.channel.send(`${emojis.IconConfig} **|** Executando...`).then(async m => {
            try {
                let beforeRunning = Date.now(); // Define a data de execu√ß√£o
                let result = eval(args.join(' ')); // Gera os argumentos do eval

                if (result instanceof Promise) {
                    m.edit('O c√≥digo retornou uma promise - aguardando ela ser resolvida...')
                    await result
                }; // Se retorna Promise, ele enviar√° o recado

                if (typeof result !== 'string') result = require('util').inspect(result); // Se retornar uma string, ele enviar√° o recado
                let end = (Date.now() - beforeRunning); // Define o final do tempo

                let embed = new Discord.MessageEmbed(message.author)
                    .setTimestamp()
                    .setAuthor(`Fun√ß√£o executada por ${message.author.username}`)
                    .setColor(colors.default)
                    .addField('üì© Entrada', `\`\`\`js\n${args.join(" ")}\`\`\``)
                    .addField('üö© Sa√≠da', `\`\`\`js\n${result.slice(0, 1010)}\n\`\`\``)
                    .setFooter(`‚Ä¢ Autor: ${message.author.tag}`, message.author.displayAvatarURL({ dynamic: true, format: 'png', size: 1024 })) // Define a embed com as informa√ß√µes do eval

                if (result.length > 1010) embed.addField('üö© Continua√ß√£o do Resultado', `\`\`\`js\n${result.slice(1010, 2020)}\n\`\`\``); // Se o eval for maior que os 1010 de caracteris, ele adicionar√° um field

                m.edit(`${emojis.IconUnread} **|** ${message.author}, voc√™ teve sucesso ao executar o c√≥digo!`, { embed: embed }); // Notificar√° ao usu√°rio sobe o eval
            } catch (e) {
                let embed = new Discord.MessageEmbed(message.author)
                    .setTimestamp()
                    .setAuthor(`Fun√ß√£o executada por ${message.author.username}`)
                    .setDescription('```js\n' + e.stack.slice(0, 2000) + '```')
                    .setColor(colors.default)
                    .setFooter(`‚Ä¢ Autor: ${message.author.tag}`, message.author.displayAvatarURL({ dynamic: true, format: 'png', size: 1024 })); // Define a embed com as informa√ß√µes de erro

                m.edit(`${emojis.IconUnread} **|** ${message.author}, voc√™ teve falha ao executar o c√≥digo!`, { embed: embed }); // Notificar√° ao usu√°rio sobre o erro no eval
            }; // Caso ocorra um erro, ele ir√° retornar essa a√ß√£o
        });
    }, // Executa p c√≥digo do comando
}; // Exporta o comando com todas as configura√ß√µes e informa√ß√µes