const Discord = require("discord.js"); // Exporta a depend√™ncia da discord.js
const firebase = require("firebase"); // Exporta a depend√™ncia do firebase
const database = firebase.database(); // Puxa a fun√ß√£o de banco de dados do firebase
const numberFormatter = require("number-formatter"); // Exporta a depend√™ncia do number-formatter para format√ß√£o

module.exports = {
    name: "pay", // Nome principal do comando
    description: "Comando para realizar pagamentos entre usu√°rio com Yens.", // Descri√ß√£o do comando
    aliases: ["pagar"], // Apelidos do comando
    category: "social", // Categorias: fun, mod, utils, config, social, dev, register, botlist, nsfw, mc, image
    guildOnly: true, // S√≥ pode ser usado em servidor
    ClientPerm: ["EMBED_LINKS"], // Permiss√µes da Mizuhara para executar o comando
    usage: "[Usu√°rio] [Valor]", // Modo de uso para usar o comando
    cooldown: 5, // Tempo de cooldown do comando
    backlist: true, // Apenas para membros que n√£o est√£o banidos
    async execute(client, message, args, emojis, colors, config, prefix) {
        let user = message.mentions.users.first() || client.users.cache.get(args[0]); // Faz a busca do usu√°rio pela men√ß√£o ou id

        if (!user) {
            return message.channel.send(`${emojis.IconCross} **|** ${message.author}, voc√™ precisa mencionar um membro **V√°lido** para realizar a transa√ß√£o de **Yens**!`); // Notifica o autor sobre a falta da men√ß√£o
        }; // Verifica se existe o autor mencionou um usu√°rio valido

        if (user.id == message.author.id) {
            return message.channel.send(`${emojis.IconCross} **|** ${message.author}, voc√™ n√£o pode fazer uma transa√ß√£o para voc√™ mesmo! Mencione outra pessoa para realizar a transa√ß√£o!`); // Notifica o autor sobre n√£o poder se mencionar
        }; // Verifica se o autor se mencionou no comando

        if (user.id == client.user.id) {
            return message.channel.send(`${emojis.IconCross} **|** ${message.author}, voc√™ n√£o pode fazer uma transa√ß√£o destinada a mim! J√° sou rica de amor.`); // Notifica o autor sobre n√£o poder mencionar a Mizuhara
        }; // Verifica se o autor mencionou a mizuhara

        let valor = args[1]; // Pega o segundo argumento da mensagem como o valor

        if (isNaN(valor)) {
            return message.channel.send(`${emojis.IconCross} **|** ${message.author}, o valor que voc√™ forneceu para a transa√ß√£o n√£o √© v√°lido! Envie um numero maior de **¬•${numberFormatter("#,##0.00", 0)}** para realizar a transa√ß√£o!`); // Notifica o autor sobre o valor n√£o ser um numero
        }; // Verifica se o valor √© um numero 

        if (valor <= 0) {
            return message.channel.send(`${emojis.IconCross} **|** ${message.author}, o valor que voc√™ forneceu √© menor que **¬•${numberFormatter("#,##0.00", 1)}**, coloque um valor maior!`); // Notifica o autor sobre o valor se menor que 0
        }; // Verifica se o valor e menor que 0

        database.ref(`Social/${message.author.id}`).once("value").then(async function (db) {
            if (db.val() == null) {
                database.ref(`Social/${message.author.id}`).set({
                    tag: message.author.tag,
                    avatar: message.author.displayAvatarURL({ format: "png", size: 256 }),
                    sobremim: "N√£o definido.",
                    background: "https://i.pinimg.com/originals/0e/44/a9/0e44a9916e6fe6368a9f68774e5b64e2.jpg",
                    yen: 0,
                    rep: 0,
                    upvote: 0
                }); // Seta no banco de dados os dados do usu√°rio

                return message.channel.send(`${emojis.IconCross} **|** ${message.author}, voc√™ n√£o pode realizar a transa√ß√£o, pois voc√™ n√£o tem **¬•${numberFormatter("#,##0.00", parseInt(valor))} Yens**!`); // Notifica o autor sobre a falta de yens
            } else {
                if (db.val().yen < valor) {
                    let rest = parseInt(valor) - db.val().yen; // Faz a divis√£o do yen restante

                    return message.channel.send(`${emojis.IconCross} **|** ${message.author}, voc√™ n√£o pode realizar a transa√ß√£o, pois voc√™ n√£o tem **¬•${numberFormatter("#,##0.00", parseInt(valor))} Yens**! Junte **¬•${numberFormatter("#,##0.00", rest)} Yens** para realizar a transa√ß√£o`); // Notifica o autor sobre n√£o possuir yens para realizar a transa√ß√£o
                }; // Verifica se o autor tem yen para realizar a transa√ß√£o

                return message.channel.send(`:yen: **|** ${message.author}, voc√™ est√° est√° solicitando uma transa√ß√£o de **¬•${numberFormatter("#,##0.00", valor)} Yens** para o ${user}!\nüí∏ **|** Para aceitar a transa√ß√£o, voc√™ precisam clicar no ‚úÖ para aceitar.`).then(msg => {
                    msg.react("‚úÖ"); // Reaji com o emoji de confima√ß√£o

                    let collect_autor = (reaction, reactor) => reaction.emoji.name === "‚úÖ" && reactor.id === message.author.id; // Cria um coletor de emojis de confima√ß√£o do autor
                    let accept_autor = msg.createReactionCollector(collect_autor)
                        .on("collect", r => {
                            msg.delete(); // Deleta a mensagem de pergunta

                            message.channel.send(`:yen: **|** ${user}, o ${message.author} aceitou a solicita√ß√£o para uma transa√ß√£o a voc√™ de **¬•${numberFormatter("#,##0.00", valor)} Yens**!\nüí∏ **|** Para aceitar a transa√ß√£o, voc√™ precisam clicar no ‚úÖ para aceitar.`).then(c => {
                                c.react("‚úÖ"); // Reaji com o emoji de confima√ß√£o

                                let collect_user = (reaction, reactor) => reaction.emoji.name === "‚úÖ" && reactor.id === user.id; // Cria um coletor de emojis de confima√ß√£o do usu√°rio
                                let accept_user = c.createReactionCollector(collect_user)
                                    .on("collect", rr => {
                                        c.delete(); // Deleta a mensagem de pergunta

                                        database.ref(`Social/${user.id}`).once("value").then(async function (data) {
                                            if (data.val() == null) {
                                                database.ref(`Social/${user.id}`).set({
                                                    tag: user.tag,
                                                    avatar: user.displayAvatarURL({ format: "png", size: 256 }),
                                                    sobremim: "N√£o definido.",
                                                    background: "https://i.pinimg.com/originals/0e/44/a9/0e44a9916e6fe6368a9f68774e5b64e2.jpg",
                                                    yen: parseInt(valor),
                                                    rep: 0,
                                                    upvote: 0
                                                }); // Faz a setagem dos dados do usu√°rio mencionado

                                                database.ref(`Social/${message.author.id}`).update({
                                                    tag: message.author.tag,
                                                    avatar: message.author.displayAvatarURL({ format: "png", size: 256 }),
                                                    yen: db.val().yen - parseInt(valor)
                                                }); // Faz a atualiza√ß√£o do autor

                                                return message.channel.send(`${emojis.IconCheckMark} **|** ${message.author}, a sua transa√ß√£o foi realizada com sucesso! ${user} recebeu **¬•${numberFormatter("#,##0.00", valor)} Yens** na carteira dele!`); // Notifica o autor sobre a transa√ß√£o feita com sucesso
                                            } else {
                                                database.ref(`Social/${user.id}`).update({
                                                    tag: user.tag,
                                                    avatar: user.displayAvatarURL({ format: "png", size: 256 }),
                                                    yen: data.val().yen + parseInt(valor)
                                                }); // Faz a atualiza√ß√£o dos dados do usu√°rio mencionado

                                                database.ref(`Social/${message.author.id}`).update({
                                                    tag: message.author.tag,
                                                    avatar: message.author.displayAvatarURL({ format: "png", size: 256 }),
                                                    yen: db.val().yen - parseInt(valor)
                                                }); // Faz a atualiza√ß√£o do autor

                                                return message.channel.send(`${emojis.IconCheckMark} **|** ${message.author}, a sua transa√ß√£o foi realizada com sucesso! ${user} recebeu **¬•${numberFormatter("#,##0.00", valor)} Yens** na carteira dele!`); // Notifica o autor sobre a transa√ß√£o feita com sucesso
                                            };
                                        }); // Faz a busca do usu√°rio no banco de dados
                                    }); // Crua um evento de cole√ß√£o de rea√ß√µes
                            }); // Faz a pergunta ao usu√°rio mencionado se ele aceita a transa√ß√£o
                        }); // Cria um coletor e aciona o evento
                }); // Envia a mensagem para a confirma√ß√£o da transa√ß√£o
            }; // Verifica se o autor est√° no banco de dados
        }); // Faz a busca no banco de dados o autor
    }, // Executa p c√≥digo do comando
}; // Exporta o comando com todas as configura√ß√µes e informa√ß√µesa